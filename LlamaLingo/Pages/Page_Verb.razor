@page "/Verb"
@inject DbContext db            // Inject the ServerDbContext service for database access
@inject NavigationManager _nav
@layout MainLayout
@using LlamaLingo.Models
@using Microsoft.Data.SqlClient;
@using System.Data;

<h3>
	<br <br <br <br <br />
	<p>Pod#: @pod</p>
	<p>Person#:@pid</p>
</h3>

<style>
	body {
		/*background: url(images/BG/filename.png)no-repeat;*/
		background: url(images/BG/Cave_Verb.png)no-repeat;
		background-size: 1920px 1080px;
		background-position: left 0px top 0px;
		color: white;
		opacity: 100%;
		width: 1920px;
		height: 1080px;
	}

	.boxButton {
		padding: 0;
		margin: 0;
		width: 1000px;
		height: 100px;
		text-align: right;
		top: 90px;
		left: 600px;
		color: #FF0000;
		position: absolute;
		opacity: 100%;
		background-image: url("Images/GUI/DC_GUI_user_Direction.png");
		background-size: cover;
	}

	button {
		padding: 0;
		margin: 0;
		position: absolute;
		width: 180px;
		height: 90px;
		top: 76px;
		left: 0px;
		border-radius: 8px;
		transition-duration: .60s;
		color: black;
		background-color: limegreen;
		text-align: center;
		opacity: 100%;
	}

	.buttonList {
		left: 660px;
		opacity: 90%;
		background-image: url("images/buttons/Button_L.png");
		box-shadow: 0 30px 60px rgba(0,0,0,.5);
	}

		.buttonList:hover {
			box-shadow: 0 5px 10px rgba(0,0,0,.5);
			transform: scale(.85);
		}

	.buttonAdd {
		background-image: url("Images/buttons/Button_A.png");
		background-size: cover;
		box-shadow: 0 30px 60px rgba(0,0,0,.5);
	}

		.buttonAdd:hover {
			box-shadow: 0 5px 10px rgba(0,0,0,.5);
			transform: scale(.85);
		}

	.buttonChange {
		background-image: url("Images/buttons/Button_C.png");
		background-size: cover;
		box-shadow: 0 30px 60px rgba(0,0,0,.5);
	}

		.buttonChange:hover {
			box-shadow: 0 5px 10px rgba(0,0,0,.5);
			transform: scale(.85);
		}

	.buttonDelete {
		background-image: url("Images/buttons/Button_D.png");
		background-size: cover;
		box-shadow: 0 30px 60px rgba(0,0,0,.5);
	}

		.buttonDelete:hover {
			box-shadow: 0 5px 10px rgba(0,0,0,.5);
			transform: scale(.85);
		}


	jukebox {
		position: absolute;
		left: 90%;
		top: 95%;
		border-radius: 0px;
		opacity: 40%;
	}

	boxCRUD {
		padding: 0;
		margin: 0;
		width: 1000px;
		height: 100px;
		text-align: right;
		top: 90px;
		left: 820px;
		color: #FF0000;
		position: absolute;
		opacity: 75%;
		background-image: url("Images/GUI/DC_GUI_user_Direction.png");
		background-size: cover;
	}








	.exhibitPanel {
		position: absolute;
		top: 370px;
		left: 420px;
		color: blanchedalmond;
		width: 540px;
		font-size: x-large;
		text-overflow: ellipsis;
		/* Required for text-overflow to do anything */
		white-space: nowrap;
		overflow: hidden;
	}

	.exhibitInfo {
		position: absolute;
		top: 370px;
		left: 420px;
		color: blanchedalmond;
		width: 540px;
		height: 700px;
		font-size: x-large;
		text-overflow: ellipsis;
		/* Required for text-overflow to do anything */
		white-space: nowrap;
		overflow: hidden;
	}

	.Shadow {
		position: absolute;
		top: 120px;
		left: 1520px;
		width: 250px;
		height: 920px;
		background-color: grey background-size: cover;
		border-radius: 12px;
		opacity: 95%;
	}

	.ShadowText {
		position: absolute;
		top: 360px;
		left: 390px;
		width: 500px;
		height: 920px;
		background-color: grey background-size: cover;
		border-radius: 12px;
		opacity: 95%;
	}

	.boxFilter {
		margin: 10;
		position: absolute;
		top: 360px;
		left: 1020px;
		background-color: bisque border-radius: 12px;
		opacity: 85%;
		width: 200px;
		height: 360px;
	}

	.PypeTypeFilter {
		margin: 0;
		position: absolute;
		top: 60px;
		left: 60px;
		color: blanchedalmond;
		background-color: bisque border-radius: 12px;
		opacity: 55%;
		width: 160px;
		height: 200px;
		font-size: x-large;
		text-overflow: ellipsis;
		/* Required for text-overflow to do anything */
		white-space: nowrap;
		overflow: hidden;
	}

	.PypeType {
		margin: 0;
		position: absolute;
		top: 143px;
		left: 20px;
		color: blanchedalmond;
		background-color: bisque border-radius: 12px;
		opacity: 55%;
		width: 440px;
		font-size: x-large;
		text-overflow: ellipsis;
		/* Required for text-overflow to do anything */
		white-space: nowrap;
		overflow: hidden;
	}

	.commitChange {
		position: absolute;
		top: 285px;
		left: 40px;
		width: 120px;
		height: 50px;
		background-image: url("Images/buttons/btn_change.png");
		background-size: cover;
		box-shadow: 0 30px 60px rgba(0,0,0,.5);
	}
		.commitChange:hover {
			box-shadow: 0 5px 10px rgba(0,0,0,.5);
			transform: scale(.85);
		}

	.commitDelete {
		position: absolute;
		top: 285px;
		left: 40px;
		width: 120px;
		height: 50px;
		background-image: url("Images/buttons/btn_delete.png");
		background-size: cover;
		box-shadow: 0 30px 60px rgba(0,0,0,.5);
	}
		.commitDelete:hover {
			box-shadow: 0 5px 10px rgba(0,0,0,.5);
			transform: scale(.85);
		}

	.commitCreate {
		position: absolute;
		top: 285px;
		left: 40px;
		width: 120px;
		height: 50px;
		background-image: url("Images/buttons/btn_add.png");
		background-size: cover;
		box-shadow: 0 30px 60px rgba(0,0,0,.5);
	}
		.commitCreate:hover {
			box-shadow: 0 5px 10px rgba(0,0,0,.5);
			transform: scale(.85);
		}

</style>

<!-- ************************************************************************************ -->
<!-- ******************************** DISPLAY PANELS ************************************ -->
<!-- ************************************************************************************ -->

<div
		<img src="images/UIpanels/Panel_Marque.png"
		 style="position:absolute; top:90px; left:600px; width:580px;border-radius:0px;background-size: cover;">
</div>

<div
		<img src="images/buttons/Btn_Luster_Verb.png"
		 style="position:absolute; top:85px; left:820px; width:140px;border-radius:8px;background-size: cover;">
</div>

<div
		<img src="images/UIpanels/Panel_Fluer.png"
		 style="position:absolute; top:80px; left:1250px; width:188px;border-radius:8px;background-size: cover;">
</div>

<!-- ************************************************************************************ -->
<!-- *********************** DISPLAY PANEL CRUD BUTTONS ********************************* -->
<!-- ************************************************************************************ -->

<anythingyouwant>
	<div class="boxButton">
		<form @onsubmit="ShowList">
			<button class="buttonList" style="	left:10px;	">
				@table
			</button>
		</form>

		<form @onsubmit="ShowCreate">
			<button class="buttonAdd" style="	left: 202px;">
				@table
			</button>
		</form>

		<form @onsubmit="ShowModify">
			<button class="buttonChange" style="	left:394px;	">
				@table
			</button>
		</form>

		<form @onsubmit="ShowDelete">
			<button class="buttonDelete" style=" top: 210px; left:650px; opacity:50%; 	">
				@table
			</button>
		</form>
	</div>
</anythingyouwant>

<!-- ************************************************************************************ -->
<!-- ************************************* VERB LIST  *********************************** -->
<!-- ************************************************************************************ -->

@if (showList)
{
	<div class="ShadowText">
		<img src="images/UIpanels/shadow_black.png"
		 style="border-radius: 12px;background-size: cover;">
	</div>

	<div class="exhibitPanel">
		<table id="listTable">
			@*A "table" (really a list) of all records of the same type as selected table crud value*@
			<tr>
				<th>@table POD ID# Status Type Label Description</th>
			</tr>
			@foreach (var verb in verbs)
			{   // Loop through each label of the currently selected table
				<tr>
					<td>@verb.PodIdFk     @verb.VerbId     @verb.VerbStatus     @verb.VerbType  @verb.VerbLabel @verb.VerbDescription </td>
				</tr>
				// Display only the goal's description
			}
		</table>
	</div>
}

<!-- ************************************************************************************ -->
<!-- ************************************* VERB CREATE ********************************** -->
<!-- ************************************************************************************ --> 

@if (showCreate)
{
	<br>
	<div style="font-size:x-large; ">
		<form @onsubmit="OnCreate">

			<div class="ShadowText">
				<img src="images/UIpanels/shadow_black.png"
				 style="border-radius: 12px;background-size: cover;">
			</div>

			<div class="boxFilter">
					<img src="images/UIpanels/Panel_Commit_add.png"
					 style="border-radius: 12px;background-size: cover;">
					<button class="commitCreate" type="submit"></button>
			</div>

			<div class="exhibitInfo">

				<label>
					New @table:  Verb Label 16:
					<input class="form-control" @bind="currentVerb.VerbLabel" maxlength="16" required />
				</label><br><br>

				<label>
					Description:
					<input class="form-control" @bind="currentVerb.VerbDescription" maxlength="255" required />
				</label><br><br>

				<label>
					Type:
					<select @bind="currentVerb.VerbType" required>
						@foreach (var pype in pypes)
						{
							<option value="@pype.PypeType">@pype.PypeType</option>
						}
					</select>
				</label><br><br>

			</div>
		</form>
	</div>
}

<!-- ************************************************************************************ -->
<!-- ************************************* VERB CHANGE ********************************** -->
<!-- ************************************************************************************ -->

@if (showModify)
{
	<div class="ShadowText">
		<img src="images/UIpanels/shadow_black.png"
		 style="border-radius: 12px;background-size: cover;">
	</div>

	<div style="font-size:x-large; display: inline-block;">
		<form @onsubmit="OnChange">
			@**@
			
			<div class="boxFilter">

				<div class="PypeTypeFilter">
					<label>
						<select @bind="selectedFilter">
						<option value="****">****</option>
						@foreach (var pype in pypes)
						{
							if (pype.PypeId == "VERB")
							{
								<option value="@pype.PypeType">@pype.PypeType</option>
							}
						}
						</select>
					</label><br><br>
				</div>

				<div class="PypeType">
					<label>
						@table 
						<select class="form-control" @bind="selectedVerb">
						@foreach (var verb in verbs)
						{
							<option value="@verb.VerbId"> @verb.VerbLabel</option>
						}
						</select>
					</label>
				</div>

					<img src="images/UIpanels/Panel_Commit.png"
					 style="border-radius: 12px;background-size: cover;">
					<button class="commitChange" type="submit"></button>
				</div>


			<div class="exhibitInfo">
				<label>
					label:
					<input class="form-control" @bind="currentVerb.VerbLabel" maxlength="16" required />
				</label><br><br>

				<label>
					description:
					<input class="form-control" @bind="currentVerb.VerbDescription" maxlength="255" required />
				</label><br><br><label>

					type:
					<select @bind="currentVerb.VerbType" required>
						@foreach (var pype in pypes)
						{
							if (pype.PypeId == "VERB")
							{
								<option value="@pype.PypeType">@pype.PypeType</option>
							}
						}
					</select>
				</label><br><br>

				<label>
					status:
					<input class="form-control" @bind="currentVerb.VerbStatus" maxlength="1" required />
				</label><br><br>

				<label>
					image:
					<input class="form-control" @bind="currentVerb.UrlIdPk" type="number" required />
				</label>


			</div>
		</form>
	</div>

}

<!-- ************************************************************************************ -->
<!-- ************************************* VERB DELETE ********************************** -->
<!-- ************************************************************************************ -->

@if (showDelete)

{
	<div style="font-size:x-large; display: inline-block;">
		<form @onsubmit="OnDelete">

			<div class="ShadowText">
				<img src="images/UIpanels/shadow_black.png"
				 style="border-radius: 12px;background-size: cover;">
			</div>




			<div class="exhibitInfo">
				<label>
					@table to delete:
					<select class="form-control" @bind="currentVerb.VerbId">
						@foreach (var verb in verbsDelete)
						{
							<option value="@verb.VerbId"> @verb.VerbLabel</option>
						}
					</select>
				</label>

				<label>
					filter:
					<select @bind="selectedFilter">
						<option value="****">****</option>
						@foreach (var pype in pypes)
						{
							if (pype.PypeId == "VERB")
							{
								<option value="@pype.PypeType">@pype.PypeType</option>
							}
						}

					</select>
				</label><br><br>
				<button type="submit">Delete</button>
			</div>





			<div class="exhibitInfo">
				Only if the Status = D
			</div>
		</form>
	</div>
}


@*<jukebox>
	<div>

		<audio controls="controls">
			<source src="/images/Audio/curatorintrojazz.mp3" />
		</audio>

	</div>
</jukebox>*@


@code {
	[Parameter]
	[SupplyParameterFromQuery]
	public int? pod { get; set; }
	[Parameter]
	[SupplyParameterFromQuery]
	public int? pid { get; set; }

	private readonly string sqlServerconnectionString = "Server=tcp:llamalingo.database.windows.net,1433;Initial Catalog=LlamaLingoDB;Persist Security Info=False;User ID=LlamaLingoLogin;Password=UMDLlamaLingo4444;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;";
	public bool showCreate = false;
	public bool showModify = false;
	public bool showDelete = false;
	public bool showList = false;
	public string table = "";
	public int DDCounter = 0;
	private List<Pype> pypes = new List<Pype>();  // Declare a private list of Pype objects
	private List<Verb>
		verbs = new List<Verb>();  // Declare a private list of Verb objects
	private List<Verb>
		verbsDelete = new List<Verb>();  // Declare a private list of Verb objects
	private Verb currentVerb = new Verb();
	private string _selectedFilter = "****"; // user filter selection
	public string selectedFilter
	{
		get { return _selectedFilter; }
		set
		{
			if (_selectedFilter != value)
			{
				_selectedFilter = value;
				Read();
			}
		}
	}

	private int _selectedVerb = 1; // user filter selection
	public int selectedVerb
	{
		get { return _selectedVerb; }
		set
		{
			if (_selectedVerb != value)
			{
				_selectedVerb = value;
				AutoFill();
			}
		}
	}

	private void ShowList()
	{
		if (showList == false)
		{
			showModify = false;
			showDelete = false;
			showList = true;
			showCreate = false;
		}
		else
		{
			showList = false;
		}
	}

	private void ShowCreate()
	{
		if (showCreate == false)
		{
			showModify = false;
			showDelete = false;
			showList = false;
			showCreate = true;
		}
		else
		{
			showCreate = false;
		}
	}

	private void ShowModify()
	{
		if (showModify == false)
		{
			showCreate = false;
			showDelete = false;
			showList = false;
			showModify = true;
		}
		else
		{
			showModify = false;
		}
	}

	private void ShowDelete()
	{
		if (showDelete == false)
		{
			showCreate = false;
			showModify = false;
			showList = false;
			showDelete = true;
		}
		else
		{
			showDelete = false;
		}
	}
	private void OnCreate()
	{
		Create();
		Read();
		DeleteRead();
	}
	private void OnChange()
	{
		Change();
		Read();
		DeleteRead();
	}
	private void OnDelete()
	{
		Delete();
		Read(); 
		DeleteRead();
	}

	private void AutoFill()
	{
		Verb target = verbs.Find(x => x.VerbId == selectedVerb);
		currentVerb.VerbLabel = target.VerbLabel;
		currentVerb.VerbDescription = target.VerbDescription;
		currentVerb.VerbType = target.VerbType;
		currentVerb.VerbStatus = target.VerbStatus;
		currentVerb.UrlIdPk = target.UrlIdPk;
	}

	private void Read()
	{
		string spName = "dbo.CRUD_Verb";

		SqlConnection connection = new SqlConnection(sqlServerconnectionString);
		SqlCommand cmd = new SqlCommand(spName, connection);

		SqlParameter param1 = new SqlParameter();
		param1.ParameterName = "@PROC_filter";
		param1.Value = selectedFilter;

		SqlParameter param2 = new SqlParameter();
		param2.ParameterName = "@PROC_action";
		param2.Value = "Read";

		SqlParameter param3 = new SqlParameter();
		param3.ParameterName = "@pod";
		param3.Value = pod;

		cmd.Parameters.Add(param1);
		cmd.Parameters.Add(param2);
		cmd.Parameters.Add(param3);

		connection.Open();
		cmd.CommandType = CommandType.StoredProcedure;

		//execute the stored procedure
		cmd.ExecuteNonQuery();
		SqlDataReader reader = cmd.ExecuteReader();
		verbs.Clear();
		while (reader.Read())
		{
			verbs.Add(new Verb
			{
			VerbId = reader.GetInt32(0),
			VerbLabel = reader.GetString(1),
			VerbDescription = reader.GetString(2),
			VerbType = reader.GetString(3),
			VerbStatus = reader.GetString(4),
			PodIdFk = reader.GetInt32(5),
			UrlIdPk = reader.GetInt32(6)
			});
		}
	}

	private void Create()
	{
		string spName = "dbo.CRUD_Verb";

		SqlConnection connection = new SqlConnection(sqlServerconnectionString);
		SqlCommand cmd = new SqlCommand(spName, connection);

		SqlParameter param1 = new SqlParameter();
		param1.ParameterName = "@label";
		param1.Value = currentVerb.VerbLabel;

		SqlParameter param2 = new SqlParameter();
		param2.ParameterName = "@desc";
		param2.Value = currentVerb.VerbDescription;

		SqlParameter param3 = new SqlParameter();
		param3.ParameterName = "@type";
		param3.Value = currentVerb.VerbType;

		SqlParameter param4 = new SqlParameter();
		param4.ParameterName = "@PROC_action";
		param4.Value = "Create";

		SqlParameter param5 = new SqlParameter();
		param5.ParameterName = "@pod";
		param5.Value = pod;

		cmd.Parameters.Add(param1);
		cmd.Parameters.Add(param2);
		cmd.Parameters.Add(param3);
		cmd.Parameters.Add(param4);
		cmd.Parameters.Add(param5);

		connection.Open();
		cmd.CommandType = CommandType.StoredProcedure;

		//execute the stored procedure
		cmd.ExecuteNonQuery();
		currentVerb = new Verb();
	}

	private void Change()
	{
		string spName = "dbo.CRUD_Verb";

		SqlConnection connection = new SqlConnection(sqlServerconnectionString);
		SqlCommand cmd = new SqlCommand(spName, connection);

		SqlParameter param1 = new SqlParameter();
		param1.ParameterName = "@label";
		param1.Value = currentVerb.VerbLabel;

		SqlParameter param2 = new SqlParameter();
		param2.ParameterName = "@desc";
		param2.Value = currentVerb.VerbDescription;

		SqlParameter param3 = new SqlParameter();
		param3.ParameterName = "@id";
		param3.Value = selectedVerb;

		SqlParameter param4 = new SqlParameter();
		param4.ParameterName = "@PROC_action";
		param4.Value = "Update";

		SqlParameter param5 = new SqlParameter();
		param5.ParameterName = "@pod";
		param5.Value = pod;

		SqlParameter param6 = new SqlParameter();
		param6.ParameterName = "@status";
		param6.Value = currentVerb.VerbStatus;

		SqlParameter param7 = new SqlParameter();
		param7.ParameterName = "@url_id_pk";
		param7.Value = currentVerb.UrlIdPk;

		SqlParameter param8 = new SqlParameter();
		param8.ParameterName = "@type";
		param8.Value = currentVerb.VerbType;

		cmd.Parameters.Add(param1);
		cmd.Parameters.Add(param2);
		cmd.Parameters.Add(param3);
		cmd.Parameters.Add(param4);
		cmd.Parameters.Add(param5);
		cmd.Parameters.Add(param6);
		cmd.Parameters.Add(param7);
		cmd.Parameters.Add(param8);

		connection.Open();
		cmd.CommandType = CommandType.StoredProcedure;

		//execute the stored procedure
		cmd.ExecuteNonQuery();
		currentVerb = new Verb();
	}

	private void Delete()
	{
		string spName = "dbo.CRUD_Verb";

		SqlConnection connection = new SqlConnection(sqlServerconnectionString);
		SqlCommand cmd = new SqlCommand(spName, connection);

		SqlParameter param1 = new SqlParameter();
		param1.ParameterName = "@id";
		param1.Value = currentVerb.VerbId;

		SqlParameter param2 = new SqlParameter();
		param2.ParameterName = "@PROC_action";
		param2.Value = "Delete";

		cmd.Parameters.Add(param1);
		cmd.Parameters.Add(param2);

		connection.Open();
		cmd.CommandType = CommandType.StoredProcedure;

		//execute the stored procedure
		cmd.ExecuteNonQuery();

	}

	private void DeleteRead()
	{
		string spName = "dbo.VerbDeleteRead";

		SqlConnection connection = new SqlConnection(sqlServerconnectionString);
		SqlCommand cmd = new SqlCommand(spName, connection);

		SqlParameter param1 = new SqlParameter();
		param1.ParameterName = "@PROC_filter";
		param1.Value = selectedFilter;

		SqlParameter param2 = new SqlParameter();
		param2.ParameterName = "@pod";
		param2.Value = pod;

		cmd.Parameters.Add(param1);
		cmd.Parameters.Add(param2);

		connection.Open();
		cmd.CommandType = CommandType.StoredProcedure;

		//execute the stored procedure
		cmd.ExecuteNonQuery();
		SqlDataReader reader = cmd.ExecuteReader();
		verbsDelete.Clear();
		while (reader.Read())
		{
			verbsDelete.Add(new Verb
				{
					VerbId = reader.GetInt32(0),
					VerbLabel = reader.GetString(1),
					VerbDescription = reader.GetString(2),
					VerbType = reader.GetString(3),
					VerbStatus = reader.GetString(4),
					PodIdFk = reader.GetInt32(5),
					UrlIdPk = reader.GetInt32(6)
				});
		}
	}

	private void PypeRead()
	{
		string spName = "dbo.sp_Pype_Type_Locked";

		SqlConnection connection = new SqlConnection(sqlServerconnectionString);
		SqlCommand cmd = new SqlCommand(spName, connection);

		SqlParameter param1 = new SqlParameter();
		param1.ParameterName = "@PROC_Input_Filter";
		param1.Value = "VERB";

		SqlParameter param2 = new SqlParameter();
		param2.ParameterName = "@pod";
		param2.Value = pod;

		cmd.Parameters.Add(param1);
		cmd.Parameters.Add(param2);

		connection.Open();
		cmd.CommandType = CommandType.StoredProcedure;

		//execute the stored procedure
		cmd.ExecuteNonQuery();
		SqlDataReader reader = cmd.ExecuteReader();

		while (reader.Read())
		{
			pypes.Add(new Pype
				{
					PypeId = reader.GetString(0),
					PypeType = reader.GetString(1),
					PypeLabel = reader.GetString(2),
					PypeStatus = reader.GetString(3),
					PypeDesc = reader.GetString(4),
					PypeLink = reader.GetString(5),
				});
		}
	}

	protected override void OnInitialized()   // Override the OnInitialized method
	{
		Read();
		PypeRead();
		DeleteRead();
	}

}
